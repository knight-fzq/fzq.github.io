{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3]\n",
      " [4 5 6]]\n",
      "2\n",
      "[[1.1 2.3 4.5]\n",
      " [3.1 2.2 7.6]]\n",
      "7.6\n",
      "[[1 3 4]\n",
      " [6 8 5]]\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "#创建一个矩阵,dtype=有没有无所谓,甚至np.都可以没有，直接int\n",
    "a=np.array([[1,2,3],\n",
    "           [4,5,6]],np.int32)\n",
    "print(a)\n",
    "print(a[0][1])\n",
    "b=np.array([[1.1,2.3,4.5],\n",
    "            [3.1,2.2,7.6]],dtype=np.float64)\n",
    "print(b)\n",
    "print(b[1][2])\n",
    "#最简洁\n",
    "c=np.array([[1,3,4],\n",
    "            [6,8,5]],int)\n",
    "print(c)\n",
    "print(c[0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "6\n",
      "(2, 3)\n",
      "2\n",
      "(2, 3)\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "#矩阵的属性\n",
    "#array.ndim返回行\n",
    "#array.shape返回行列的二元组\n",
    "#array.size返回元素总个数\n",
    "print(a.ndim)\n",
    "print(a.size)\n",
    "print(a.shape)\n",
    "print(b.ndim)\n",
    "print(b.shape)\n",
    "print(b.size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3]\n",
      " [4 5 6]]\n",
      "[[4 5 6]\n",
      " [7 8 9]]\n",
      "[[ 3  6  9]\n",
      " [12 15 18]]\n",
      "[[0.33333333 0.66666667 1.        ]\n",
      " [1.33333333 1.66666667 2.        ]]\n",
      "[[  1   8  27]\n",
      " [ 64 125 216]]\n"
     ]
    }
   ],
   "source": [
    "#矩阵与数的运算,没有a\\3\n",
    "print(a)\n",
    "print(a+3)\n",
    "print(a*3)\n",
    "print(a/3)\n",
    "print(a**3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3]\n",
      " [4 5 6]]\n",
      "[[0.66944648 0.40349017]\n",
      " [0.65057702 0.00366945]\n",
      " [0.54824086 0.42820899]]\n",
      "[[3.61532309 1.69545606]\n",
      " [9.22011616 4.20156192]]\n",
      "[[2.28340718 3.35634383 4.42928049]\n",
      " [0.66525483 1.3195013  1.97374778]\n",
      " [2.26107683 3.23752668 4.21397653]]\n",
      "[[3.61532309 1.69545606]\n",
      " [9.22011616 4.20156192]]\n",
      "[[2.28340718 3.35634383 4.42928049]\n",
      " [0.66525483 1.3195013  1.97374778]\n",
      " [2.26107683 3.23752668 4.21397653]]\n"
     ]
    }
   ],
   "source": [
    "#矩阵乘法\n",
    "print(a)\n",
    "b=np.random.random((3,2))\n",
    "print(b)\n",
    "print(a.dot(b))\n",
    "print(b.dot(a))\n",
    "print(np.dot(a,b))\n",
    "print(np.dot(b,a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 1.]\n",
      " [1. 1.]\n",
      " [1. 1.]]\n",
      "[[0. 0.]\n",
      " [0. 0.]\n",
      " [0. 0.]]\n",
      "[[0. 0.]\n",
      " [0. 0.]\n",
      " [0. 0.]]\n",
      "[ 1.          1.47368421  1.94736842  2.42105263  2.89473684  3.36842105\n",
      "  3.84210526  4.31578947  4.78947368  5.26315789  5.73684211  6.21052632\n",
      "  6.68421053  7.15789474  7.63157895  8.10526316  8.57894737  9.05263158\n",
      "  9.52631579 10.        ]\n",
      "[[ 1.          1.47368421  1.94736842  2.42105263  2.89473684]\n",
      " [ 3.36842105  3.84210526  4.31578947  4.78947368  5.26315789]\n",
      " [ 5.73684211  6.21052632  6.68421053  7.15789474  7.63157895]\n",
      " [ 8.10526316  8.57894737  9.05263158  9.52631579 10.        ]]\n",
      "[[0.94136049 0.0643874 ]\n",
      " [0.95208159 0.42902102]\n",
      " [0.9175096  0.79651704]]\n"
     ]
    }
   ],
   "source": [
    "#特殊矩阵的建立ones zeros empty reshape linspace random\n",
    "#np.ones()\n",
    "x=np.ones((3,2))\n",
    "print(x)\n",
    "x=np.zeros((3,2))\n",
    "print(x)\n",
    "x=np.empty((3,2))\n",
    "print(x)\n",
    "x=np.linspace(1,10,20)\n",
    "print(x)\n",
    "x=x.reshape((4,5))\n",
    "print(x)\n",
    "x=np.random.random((3,2))\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3]\n",
      " [4 5 6]]\n",
      "1\n",
      "[1 2 3]\n",
      "[1 4]\n",
      "6\n",
      "[4 5 6]\n",
      "[3 6]\n",
      "21\n",
      "[5 7 9]\n",
      "[ 6 15]\n"
     ]
    }
   ],
   "source": [
    "#numpy方法,sum,min,max,0是对行操作，1是对列操作，但是都返回行向量!!!!axis=有没有无所谓\n",
    "print(a)\n",
    "print(np.min(a))\n",
    "print(np.min(a,0))\n",
    "print(np.min(a,1))\n",
    "print(np.max(a))\n",
    "print(np.max(a,axis=0))\n",
    "print(np.max(a,axis=1))\n",
    "print(np.sum(a))\n",
    "print(np.sum(a,axis=0))\n",
    "print(np.sum(a,axis=1))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3]\n",
      " [4 5 6]]\n",
      "[[False False False]\n",
      " [ True  True  True]]\n",
      "[[ True  True False]\n",
      " [False False False]]\n",
      "[[False False  True]\n",
      " [False False False]]\n",
      "[[1 2 3]\n",
      " [4 5 6]]\n",
      "[[1 3 4]\n",
      " [6 8 5]]\n",
      "[[False False False]\n",
      " [False False  True]]\n",
      "[[False  True  True]\n",
      " [ True  True False]]\n"
     ]
    }
   ],
   "source": [
    "#numpy矩阵比较,矩阵与数比较，矩阵与矩阵比较\n",
    "print(a)\n",
    "print(a>3)\n",
    "print(a<3)\n",
    "print(a==3)\n",
    "print(a)\n",
    "print(c)\n",
    "print(a>c)\n",
    "print(a<c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
