{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3]\n",
      " [2 3 4]]\n",
      "[[1 2]\n",
      " [2 3]\n",
      " [3 4]]\n",
      "[[1 2]\n",
      " [2 3]\n",
      " [3 4]]\n",
      "(2, 3)\n",
      "6\n",
      "2\n",
      "[[1 2 3]\n",
      " [2 3 4]]\n",
      "<numpy.flatiter object at 0x00000217A23AE520>\n"
     ]
    }
   ],
   "source": [
    "#复习上一节\n",
    "#建立一个矩阵\n",
    "\n",
    "import numpy as np\n",
    "a=np.array([[1,2,3],\n",
    "           [2,3,4]])\n",
    "print(a)\n",
    "#矩阵的几个属性，转置np.transpose(),a.T,元素个数a.size,元素维数a.ndim,元素行列数a.shape,flat变成行向量\n",
    "print(a.T)\n",
    "print(np.transpose(a))\n",
    "print(a.shape)\n",
    "print(a.size)\n",
    "print(a.ndim)\n",
    "print(a)\n",
    "print(a.flat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0.]\n",
      " [0. 0.]\n",
      " [0. 0.]]\n",
      "[[1. 1.]\n",
      " [1. 1.]\n",
      " [1. 1.]]\n",
      "[[1. 1.]\n",
      " [1. 1.]\n",
      " [1. 1.]]\n",
      "[ 1.          1.47368421  1.94736842  2.42105263  2.89473684  3.36842105\n",
      "  3.84210526  4.31578947  4.78947368  5.26315789  5.73684211  6.21052632\n",
      "  6.68421053  7.15789474  7.63157895  8.10526316  8.57894737  9.05263158\n",
      "  9.52631579 10.        ]\n",
      "[ 0  1  2  3  4  5  6  7  8  9 10 11]\n",
      "[ 0  1  2  3  4  5  6  7  8  9 10 11]\n",
      "[[0.45451695 0.32743032]\n",
      " [0.22636733 0.77430192]\n",
      " [0.8572624  0.62074415]]\n"
     ]
    }
   ],
   "source": [
    "#特殊矩阵的建立np.zeros,np.ones,np.empty,np.arange,array.reshape,np.random.random()\n",
    "a=np.zeros((3,2))\n",
    "print(a)\n",
    "a=np.ones((3,2))\n",
    "print(a)\n",
    "a=np.empty((3,2))\n",
    "print(a)\n",
    "a=np.linspace(1,10,20)\n",
    "print(a)\n",
    "a=np.arange(12)\n",
    "print(a)\n",
    "a.reshape(3,4)\n",
    "print(a)\n",
    "a=np.random.random((3,2))\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.23806027 0.96311199 0.09577958]\n",
      " [0.32284013 0.22526677 0.52843016]\n",
      " [0.6594019  0.02136559 0.34128125]]\n",
      "[[1. 1. 1.]\n",
      " [1. 1. 1.]\n",
      " [1. 1. 1.]]\n",
      "[[3.23806027 3.96311199 3.09577958]\n",
      " [3.32284013 3.22526677 3.52843016]\n",
      " [3.6594019  3.02136559 3.34128125]]\n",
      "[[0.7141808  2.88933596 0.28733875]\n",
      " [0.96852038 0.67580031 1.58529047]\n",
      " [1.9782057  0.06409677 1.02384375]]\n",
      "[[0.07935342 0.32103733 0.03192653]\n",
      " [0.10761338 0.07508892 0.17614339]\n",
      " [0.21980063 0.00712186 0.11376042]]\n",
      "[[1.34915159e-02 8.93367943e-01 8.78655932e-04]\n",
      " [3.36482532e-02 1.14311887e-02 1.47558009e-01]\n",
      " [2.86715110e-01 9.75314397e-06 3.97500135e-02]]\n",
      "[[1.29695184 1.29695184 1.29695184]\n",
      " [1.07653705 1.07653705 1.07653705]\n",
      " [1.02204874 1.02204874 1.02204874]]\n",
      "[[1.22030229 1.20974435 0.96549099]\n",
      " [1.22030229 1.20974435 0.96549099]\n",
      " [1.22030229 1.20974435 0.96549099]]\n",
      "[[1.29695184 1.29695184 1.29695184]\n",
      " [1.07653705 1.07653705 1.07653705]\n",
      " [1.02204874 1.02204874 1.02204874]]\n",
      "[[1.22030229 1.20974435 0.96549099]\n",
      " [1.22030229 1.20974435 0.96549099]\n",
      " [1.22030229 1.20974435 0.96549099]]\n",
      "[[0.23806027 0.32284013 0.6594019 ]\n",
      " [0.96311199 0.22526677 0.02136559]\n",
      " [0.09577958 0.52843016 0.34128125]]\n",
      "[[1. 1. 1.]\n",
      " [1. 1. 1.]\n",
      " [1. 1. 1.]]\n",
      "[[0.97179723 0.5709679  0.99541664]\n",
      " [0.94833818 0.97473455 0.86359961]\n",
      " [0.7903588  0.99977176 0.94232661]]\n",
      "[[1.26878566 2.6198367  1.10051647]\n",
      " [1.38104454 1.25265684 1.69626735]\n",
      " [1.93363548 1.02159547 1.40674883]]\n"
     ]
    }
   ],
   "source": [
    "#矩阵的运算,+,-,*,dot,/,**,比较,转置,cos,sin,tan,exp\n",
    "a=np.random.random((3,3))\n",
    "b=np.ones((3,3))\n",
    "print(a)\n",
    "print(b)\n",
    "print(a+3)\n",
    "print(a*3)\n",
    "print(a/3)\n",
    "print(a**3)\n",
    "print(a.dot(b))\n",
    "print(b.dot(a))\n",
    "print(np.dot(a,b))\n",
    "print(np.dot(b,a))\n",
    "print(np.transpose(a))\n",
    "print(np.transpose(b))\n",
    "print(np.cos(a))\n",
    "print(np.exp(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3]\n",
      " [2 3 4]]\n",
      "1\n",
      "[1 2 3]\n",
      "[1 2]\n",
      "2.5\n",
      "[1.5 2.5 3.5]\n",
      "[2. 3.]\n",
      "4\n",
      "[2 3 4]\n",
      "[3 4]\n",
      "0\n",
      "5\n",
      "[0 0 0]\n",
      "2.5\n",
      "[1.5 2.5 3.5]\n",
      "(array([0, 0, 0, 1, 1, 1], dtype=int64), array([0, 1, 2, 0, 1, 2], dtype=int64))\n",
      "[[False False False]\n",
      " [False False  True]]\n",
      "[[1 2 3]\n",
      " [2 3 4]]\n",
      "[[2 2 3]\n",
      " [2 3 3]]\n",
      "[ 1  3  6  8 11 15]\n",
      "[[1 3 6]\n",
      " [2 5 9]]\n",
      "[[1 1]\n",
      " [1 1]]\n"
     ]
    }
   ],
   "source": [
    "#一些方法min,max,mean,argmin,argmax,median(中位数),comsum(累加),clip(截断)，diff(逐差)，sort(排序)\n",
    "print(a)\n",
    "print(np.min(a))\n",
    "print(np.min(a,axis=0))\n",
    "print(np.min(a,axis=1))\n",
    "print(np.mean(a))\n",
    "print(np.mean(a,axis=0))\n",
    "print(np.mean(a,axis=1))\n",
    "print(np.max(a))\n",
    "print(np.max(a,axis=0))\n",
    "print(np.max(a,axis=1))\n",
    "print(np.argmin(a))\n",
    "print(np.argmax(a))\n",
    "print(np.argmin(a,axis=0))\n",
    "print(np.median(a))\n",
    "print(np.median(a,axis=0))\n",
    "print(np.nonzero(a))\n",
    "#np.sort(a>3)等价于a>3\n",
    "print(np.sort(a>3))\n",
    "#clip截断，clip(array,min,max),a中元素小于min的全部等于min，a中元素大于max的全部等于max\n",
    "print(a)\n",
    "print(np.clip(a,2,3))\n",
    "print(np.cumsum(a))\n",
    "print(np.cumsum(a,1))\n",
    "print(np.diff(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0  1  2  3]\n",
      " [ 4  5  6  7]\n",
      " [ 8  9 10 11]]\n",
      "[ 8  9 10 11]\n",
      "[0 4 8]\n",
      "5.5\n",
      "5.5\n",
      "[[1 1 1]\n",
      " [1 1 1]\n",
      " [1 1 1]]\n",
      "[[3 3 3 3]\n",
      " [4 5 6 6]\n",
      " [6 6 6 6]]\n",
      "[[ 0  1  2  3]\n",
      " [ 4  6  8 10]\n",
      " [12 15 18 21]]\n",
      "[[False False False False]\n",
      " [False  True  True  True]\n",
      " [ True  True  True  True]]\n"
     ]
    }
   ],
   "source": [
    "#重复练习方法,min,max,median,clip,diff,comsum,mean,sort\n",
    "a=np.arange(12).reshape((3,4))\n",
    "print(a)\n",
    "print(np.max(a,0))\n",
    "print(np.min(a,1))\n",
    "print(np.mean(a))\n",
    "print(np.median(a))\n",
    "print(np.diff(a))\n",
    "print(np.clip(a,3,6))\n",
    "print(np.cumsum(a,0))\n",
    "print(np.sort(a>4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[8.62505132 2.69883532 9.98087236 2.37333156]\n",
      " [9.19146207 5.61608366 5.40764504 4.11280281]\n",
      " [4.99510585 0.25521713 8.03305328 1.12130684]\n",
      " [9.7175332  7.86107878 7.79561013 9.62937728]]\n",
      "[8.62505132 2.69883532 9.98087236 2.37333156]\n",
      "8.625051319928554\n",
      "8.625051319928554\n",
      "[8.62505132 9.19146207 4.99510585 9.7175332 ]\n",
      "[8.62505132 2.69883532 9.98087236 2.37333156]\n",
      "[9.19146207 4.99510585]\n",
      "[8.62505132 2.69883532 9.98087236 2.37333156]\n",
      "[9.19146207 5.61608366 5.40764504 4.11280281]\n",
      "[4.99510585 0.25521713 8.03305328 1.12130684]\n",
      "[9.7175332  7.86107878 7.79561013 9.62937728]\n",
      "[8.62505132 9.19146207 4.99510585 9.7175332 ]\n",
      "[2.69883532 5.61608366 0.25521713 7.86107878]\n",
      "[9.98087236 5.40764504 8.03305328 7.79561013]\n",
      "[2.37333156 4.11280281 1.12130684 9.62937728]\n"
     ]
    }
   ],
   "source": [
    "#矩阵的索引,np.array包含列表的索引，同时支持类似于matlab的索引方式\n",
    "a=10*np.random.random((4,4))\n",
    "print(a)\n",
    "#当是一维的时候a[0]是第一个元素，当多维时，是0轴上的元素\n",
    "print(a[0])\n",
    "print(a[0][0])\n",
    "print(a[0,0])\n",
    "print(a[:,0])\n",
    "print(a[0,:])\n",
    "print(a[1:3,0])\n",
    "#用for进行迭代时，总是从0轴迭代，二维时一行一行为一元素\n",
    "for i in a:\n",
    "    print(i)\n",
    "for i in a.T:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 1. 1.]\n",
      " [1. 1. 1.]\n",
      " [1. 1. 1.]]\n",
      "[[3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]]\n",
      "[[1. 1. 1.]\n",
      " [1. 1. 1.]\n",
      " [1. 1. 1.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]]\n",
      "[[3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [1. 1. 1.]\n",
      " [1. 1. 1.]\n",
      " [1. 1. 1.]]\n",
      "[[1. 1. 1. 3. 3. 3.]\n",
      " [1. 1. 1. 3. 3. 3.]\n",
      " [1. 1. 1. 3. 3. 3.]]\n",
      "[[3. 3. 3. 1. 1. 1.]\n",
      " [3. 3. 3. 1. 1. 1.]\n",
      " [3. 3. 3. 1. 1. 1.]]\n",
      "[[1. 1. 1.]\n",
      " [1. 1. 1.]\n",
      " [1. 1. 1.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]]\n",
      "[[3. 3. 3. 1. 1. 1.]\n",
      " [3. 3. 3. 1. 1. 1.]\n",
      " [3. 3. 3. 1. 1. 1.]]\n",
      "[[3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]]\n",
      "[[3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]]\n",
      "[[3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]]\n",
      "[[3. 3. 3. 3. 3. 3.]\n",
      " [3. 3. 3. 3. 3. 3.]\n",
      " [3. 3. 3. 3. 3. 3.]]\n",
      "[[1. 1. 1.]\n",
      " [1. 1. 1.]\n",
      " [1. 1. 1.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]]\n",
      "[[1. 1. 1.]\n",
      " [1. 1. 1.]\n",
      " [1. 1. 1.]]\n",
      "[1 2 3 4]\n",
      "[1 2 3 4]\n",
      "[[1 2 3 4]]\n",
      "[[1]\n",
      " [2]\n",
      " [3]\n",
      " [4]]\n",
      "[[1 2 3 4]]\n"
     ]
    }
   ],
   "source": [
    "#矩阵合并np.vstack(vertical stack),np.hstack(horizental stack),维度扩张newaxis,np.comcatenate(a1,a2,a3...,axis)\n",
    "#np.vstack(是0轴的合并)\n",
    "a=np.ones((3,3))\n",
    "b=3*np.ones((3,3))\n",
    "print(a)\n",
    "print(b)\n",
    "print(np.vstack((a,b)))\n",
    "print(np.vstack((b,a)))\n",
    "print(np.hstack((a,b)))\n",
    "print(np.hstack((b,a)))\n",
    "print(np.concatenate((a,b),0))\n",
    "print(np.concatenate((b,a),1))\n",
    "x=np.empty((3,3))\n",
    "y=np.empty((3,3))\n",
    "print(x)\n",
    "print(y)\n",
    "print(np.vstack((x,y)))\n",
    "print(np.hstack((x,y)))\n",
    "print(np.concatenate((a,b),0))\n",
    "#newaxis\n",
    "print(a)\n",
    "#(:,newaxis)相当于在第一对括号里面加[],(newaxis,:)相当于在最外面加括号，可以用来把行向量变成列向量,这是转置无法实现的,转置无法实现行变列，\n",
    "#newaxis无法实现列变行，只能.T\n",
    "a=np.array([1,2,3,4])\n",
    "print(a)\n",
    "print(a.T)\n",
    "print(a[np.newaxis,:])\n",
    "b=a[:,np.newaxis]\n",
    "print(b)\n",
    "print(b.T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]]\n",
      "[[3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]]\n",
      "[array([[3., 3., 3.]]), array([[3., 3., 3.]]), array([[3., 3., 3.]])]\n",
      "[array([[3.],\n",
      "       [3.],\n",
      "       [3.]]), array([[3.],\n",
      "       [3.],\n",
      "       [3.]]), array([[3.],\n",
      "       [3.],\n",
      "       [3.]])]\n"
     ]
    }
   ],
   "source": [
    "#矩阵分割np.split(均匀分割成几分，什么轴)\n",
    "print(x)\n",
    "print(y)\n",
    "print(np.split(x,3,0))\n",
    "print(np.split(y,3,1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]]\n",
      "[[3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]]\n",
      "[[3. 3. 3.]\n",
      " [3. 3. 3.]\n",
      " [3. 3. 3.]]\n"
     ]
    }
   ],
   "source": [
    "#赋值，当把x的数据直接附给y，是相当于同指向一个地址，只有用方法copy才可以创建一个独立的相同元素的数组\n",
    "print(x)\n",
    "print(y)\n",
    "x=y\n",
    "x=np.copy(y)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
